const TelegramBot = require("node-telegram-bot-api")
const APIClient = require("./api/apiClient")
const ErrorHandler = require("./utils/errorHandler")
const Validator = require("./utils/validator")
require("dotenv").config()

const token = process.env.TELEGRAM_BOT_TOKEN
const bot = new TelegramBot(token, { polling: true })

// Initialize API client
const API_BASE_URL = process.env.API_BASE_URL || "https://usat-taklif-backend.onrender.com/api"
const apiClient = new APIClient(API_BASE_URL)



// User states for conversation flow
const userStates = new Map()

// State constants
const STATES = {
  IDLE: "idle",
  WAITING_LANGUAGE: "waiting_language",
  WAITING_NAME: "waiting_name",
  WAITING_PHONE: "waiting_phone",
  WAITING_COURSE: "waiting_course",
  WAITING_DIRECTION: "waiting_direction",
  WAITING_MESSAGE_TEXT: "waiting_message_text",
}

// Comprehensive translation system
const TRANSLATIONS = {
  uz: {
    // Language selection
    languageSelection: "üåç Tilni tanlang",
    languageUzbek: "üá∫üáø O'zbek",
    languageRussian: "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
    
    // Welcome messages
    welcome: (name) => `üëã Hurmatli ${name}!

üéì Fan va texnologiyalar universitetining rasmiy botiga xush kelibsiz! Bu yerda siz o'z taklif va shikoyatlaringizni yuborishingiz mumkin:

Quyidagilardan birini tanlang:`,
    welcomeRegistration: "Assalomu alaykum! Ro'yxatdan o'tish uchun ism familiyangizni kiriting:",
    
    // Main menu
    suggestion: "‚úèÔ∏è Taklif",
    complaint: "‚ö†Ô∏è Shikoyat",
    back: "üîô Orqaga",
    sendMessageButton: "‚úâÔ∏è Xabar yuborish",
    
    // Registration flow
    enterFullName: "üìù Ism familiyangizni kiriting:",
    enterPhone: "üì± Telefon raqamingizni kiriting (+998XXXXXXX formatida):",
    selectCourse: "üéì Kursni tanlang:",
    selectDirection: "üíª Yo'nalishni tanlang:",
    courseSelected: (course) => `‚úÖ Kurs tanlandi: ${course}`,
    directionSelected: (direction) => `‚úÖ Yo'nalish tanlandi: ${direction}`,
    registrationCompleting: "üéâ Ro'yxatdan o'tish yakunlanmoqda...",
    registrationComplete: "‚úÖ Ro'yxatdan o'tish muvaffaqiyatli yakunlandi!",
    
    // Course options
    course1: "1-kurs",
    course2: "2-kurs", 
    course3: "3-kurs",
    course4: "4-kurs",
    
    // Direction options
    directions: {
      dasturiy_injiniring: "Dasturiy injiniring",
      kompyuter_injiniringi: "Kompyuter injiniringi",
      bank_ishi: "Bank ishi",
      moliya_texnologiyalar: "Moliya va moliyaviy texnologiyalar",
      logistika: "Logistika",
      iqtisodiyot: "Iqtisodiyot",
      buxgalteriya_hisobi: "Buxgalteriya hisobi",
      turizm_mehmondostlik: "Turizm va mehmondo'stlik",
      maktabgacha_talim: "Maktabgacha ta ºlim",
      boshlangich_talim: "Boshlang ªich ta ºlim",
      maxsus_pedagogika: "Maxsus pedagogika",
      ozbek_tili_adabiyoti: "O'zbek tili va adabiyoti",
      xorijiy_til_adabiyoti: "Xorijiy til va adabiyoti",
      tarix: "Tarix",
      matematika: "Matematika",
      psixologiya: "Psixologiya",
      arxitektura: "Arxitektura",
      ijtimoiy_ish: "Ijtimoiy ish"
    },
    
    // Category options
    categories: {
      sharoit: "üè¢ Sharoit",
      qabul: "üìù Qabul", 
      dars: "üìö Dars jarayoni",
      teacher: "üë®‚Äçüè´ O'qituvchi",
      tutor: "üéì Tyutor",
      dekanat: "üèõÔ∏è Dekanat",
      other: "‚ùì Boshqa sabab"
    },
    
    // Category descriptions
    categoryDescriptions: {
      sharoit: "Bino, xonalar, jihozlar va infratuzilma bilan bog'liq masalalar",
      qabul: "Qabul jarayoni, hujjatlar va ro'yxatga olish masalalari",
      dars: "Ta'lim sifati, dars jadvali va o'quv jarayoni",
      teacher: "Professor-o'qituvchilar bilan bog'liq masalalar",
      tutor: "Tyutorlar va ularning faoliyati haqida",
      dekanat: "Ma'muriy masalalar va dekanat xizmatlari",
      other: "Yuqoridagi kategoriyalarga kirmaydigan boshqa masalalar"
    },
    
    // Message types
    messageTypes: {
      suggestion: "taklif",
      complaint: "shikoyat"
    },
    
    // Form messages
    selectCategory: (type) => `üìù ${type} qaysi mavzuda?`,
    enterMessage: (type) => {
      const tCap = type ? type.charAt(0).toUpperCase() + type.slice(1) : "";
      return `üìù ${tCap}ingizni batafsil yozing (kamida 10 ta belgi):`;
    },
    messageTooShort: "‚ùå Xabar juda qisqa. Kamida 10 ta belgi kiriting:",
    messageTooLong: "‚ùå Xabar juda uzun. Maksimal 1000 ta belgi:",
    
    // Success messages
    messageSubmitted: (type) => `‚úÖ ${type}ingiz muvaffaqiyatli yuborildi!\n‚è∞ Holat: Ko'rib chiqilmoqda\n\nJavob 24-48 soat ichida beriladi.`,
    
    // Error messages
    errorOccurred: "‚ùå Xatolik yuz berdi",
    invalidName: "‚ùå Ism faqat harflardan iborat bo'lishi kerak va kamida 2 ta so'zdan iborat bo'lishi kerak. Qaytadan kiriting:",
    invalidPhone: "‚ùå Telefon raqam noto'g'ri formatda. +998XXXXXXX formatida kiriting:",
    messageError: "‚ùå Xabar yuborishda xatolik yuz berdi. Qaytadan urinib ko'ring.",
    registrationError: "‚ùå Xatolik yuz berdi. Ro'yxatdan o'tish uchun ism familiyangizni kiriting:",
    menuError: "‚ùå Xatolik yuz berdi. /start buyrug'ini bosib qaytadan urinib ko'ring.",
    callbackError: "‚ùå Xatolik yuz berdi. /menu buyrug'ini bosib qaytadan urinib ko'ring.",
    
    // Commands
    commands: {
      start: "Botni ishga tushirish",
      help: "Yordam",
      status: "Holat",
      admin: "Admin",
      menu: "Menyu"
    },
    
    // Help text
    helpText: `ü§ñ Bot buyruqlari:

/start - Botni ishga tushirish
/help - Yordam
/menu - Asosiy menyu

üìù Bot orqali siz:
‚Ä¢ Takliflaringizni yuborishingiz
‚Ä¢ Shikoyatlaringizni bildirshingiz  
‚Ä¢ Turli mavzular bo'yicha murojaat qilishingiz mumkin

Har bir murojaat universitet ma'muriyati tomonidan ko'rib chiqiladi.`,
    
    // Navigation
    nextPage: "‚è© Keyingi sahifa",
    prevPage: "‚è™ Oldingi sahifa",
    
    // General
    pleaseRegister: "Ro'yxatdan o'tish uchun /start buyrug'ini bosing.",
    adminOnly: "‚ùå Bu buyruq faqat administratorlar uchun.",
    noUsers: "Foydalanuvchilar yo'q",
    noMessages: "Xabarlar yo'q"
  },
  
  ru: {
    // Language selection
    languageSelection: "üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫",
    languageUzbek: "üá∫üáø O'zbek",
    languageRussian: "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
    
    // Welcome messages
    welcome: (name) => `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${name}!

üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –Ω–∞—É–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –∂–∞–ª–æ–±—ã:

–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑:`,
    welcomeRegistration: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:",
    
    // Main menu
    suggestion: "‚úèÔ∏è –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
    complaint: "‚ö†Ô∏è –ñ–∞–ª–æ–±–∞",
    back: "üîô –ù–∞–∑–∞–¥",
    sendMessageButton: "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
    
    // Registration flow
    enterFullName: "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:",
    enterPhone: "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+998XXXXXXX —Ñ–æ—Ä–º–∞—Ç):",
    selectCourse: "üéì –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:",
    selectDirection: "üíª –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
    courseSelected: (course) => `‚úÖ –ö—É—Ä—Å –≤—ã–±—Ä–∞–Ω: ${course}`,
    directionSelected: (direction) => `‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ: ${direction}`,
    registrationCompleting: "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è...",
    registrationComplete: "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
    
    // Course options
    course1: "1-–∫—É—Ä—Å",
    course2: "2-–∫—É—Ä—Å",
    course3: "3-–∫—É—Ä—Å", 
    course4: "4-–∫—É—Ä—Å",
    
    // Direction options
    directions: {
      dasturiy_injiniring: "–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è",
      kompyuter_injiniringi: "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è",
      bank_ishi: "–ë–∞–Ω–∫–æ–≤—Å–∫–æ–µ –¥–µ–ª–æ",
      moliya_texnologiyalar: "–§–∏–Ω–∞–Ω—Å—ã –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
      logistika: "–õ–æ–≥–∏—Å—Ç–∏–∫–∞",
      iqtisodiyot: "–≠–∫–æ–Ω–æ–º–∏–∫–∞",
      buxgalteriya_hisobi: "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–π —É—á–µ—Ç",
      turizm_mehmondostlik: "–¢—É—Ä–∏–∑–º –∏ –≥–æ—Å—Ç–µ–ø—Ä–∏–∏–º—Å—Ç–≤–æ",
      maktabgacha_talim: "–î–æ—à–∫–æ–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
      boshlangich_talim: "–ù–∞—á–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
      maxsus_pedagogika: "–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø–µ–¥–∞–≥–æ–≥–∏–∫–∞",
      ozbek_tili_adabiyoti: "–£–∑–±–µ–∫—Å–∫–∏–π —è–∑—ã–∫ –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
      xorijiy_til_adabiyoti: "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞",
      tarix: "–ò—Å—Ç–æ—Ä–∏—è",
      matematika: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
      psixologiya: "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è",
      arxitektura: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",
      ijtimoiy_ish: "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞"
    },
    
    // Category options
    categories: {
      sharoit: "üè¢ –£—Å–ª–æ–≤–∏—è",
      qabul: "üìù –ü—Ä–∏–µ–º",
      dars: "üìö –£—á–µ–±–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å",
      teacher: "üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",
      tutor: "üéì –¢—å—é—Ç–æ—Ä",
      dekanat: "üèõÔ∏è –î–µ–∫–∞–Ω–∞—Ç",
      other: "‚ùì –î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞"
    },
    
    // Category descriptions
    categoryDescriptions: {
      sharoit: "–í–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ –∑–¥–∞–Ω–∏—è–º–∏, –ø–æ–º–µ—â–µ–Ω–∏—è–º–∏, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π",
      qabul: "–í–æ–ø—Ä–æ—Å—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–µ–º–∞, –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
      dars: "–ö–∞—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ —É—á–µ–±–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å",
      teacher: "–í–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä—Å–∫–æ-–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ—Å—Ç–∞–≤–æ–º",
      tutor: "–û —Ç—å—é—Ç–æ—Ä–∞—Ö –∏ –∏—Ö –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
      dekanat: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ —É—Å–ª—É–≥–∏ –¥–µ–∫–∞–Ω–∞—Ç–∞",
      other: "–î—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ –≤—Ö–æ–¥—è—â–∏–µ –≤ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    },
    
    // Message types
    messageTypes: {
      suggestion: "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
      complaint: "–∂–∞–ª–æ–±–∞"
    },
    
    // Form messages
    selectCategory: (type) => `üìù –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ${type}:`,
    enterMessage: (type) => {
      const tCap = type ? type.charAt(0).toUpperCase() + type.slice(1) : "";
      return `üìù –ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–µ ${tCap} (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤):`;
    },
    messageTooShort: "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤:",
    messageTooLong: "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤:",
    
    // Success messages
    messageSubmitted: (type) => `‚úÖ –í–∞—à–µ ${type} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n‚è∞ –°—Ç–∞—Ç—É—Å: –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏\n\n–û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –¥–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 24-48 —á–∞—Å–æ–≤.`,
    
    // Error messages
    errorOccurred: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
    invalidName: "‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Å–æ—Å—Ç–æ—è—Ç—å –º–∏–Ω–∏–º—É–º –∏–∑ 2 —Å–ª–æ–≤. –í–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:",
    invalidPhone: "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +998XXXXXXX:",
    messageError: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    registrationError: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:",
    menuError: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞–∂–º–∏—Ç–µ /start –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    callbackError: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞–∂–º–∏—Ç–µ /menu –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
    
    // Commands
    commands: {
      start: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞",
      help: "–ü–æ–º–æ—â—å",
      status: "–°—Ç–∞—Ç—É—Å",
      admin: "–ê–¥–º–∏–Ω",
      menu: "–ú–µ–Ω—é"
    },
    
    // Help text
    helpText: `ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:

/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–º–æ—â—å
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

üìù –ß–µ—Ä–µ–∑ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ –ü–æ–¥–∞–≤–∞—Ç—å –∂–∞–ª–æ–±—ã
‚Ä¢ –û–±—Ä–∞—â–∞—Ç—å—Å—è –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º

–ö–∞–∂–¥–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.`,
    
    // Status text
    statusText: (apiStatus, userCount, messageCount, syncStatus, isOfflineMode, time) => `üîß –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:

üåê –°—Ç–∞—Ç—É—Å API: ${apiStatus.isOnline ? "‚úÖ Online" : "‚ùå Offline"}
üì° API URL: ${apiStatus.baseURL}
üóÇÔ∏è –†–µ–∂–∏–º: ${isOfflineMode ? "Offline" : "Online"}

üìä –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${userCount}
üí¨ –°–æ–æ–±—â–µ–Ω–∏—è: ${messageCount}

üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: ${syncStatus.isRunning ? "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" : "‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"}

ü§ñ –ë–æ—Ç: –†–∞–±–æ—Ç–∞–µ—Ç
‚è∞ –í—Ä–µ–º—è: ${time}`,
    
    // Admin text
    adminText: (userCount, messageCount, apiStatus, isOfflineMode, recentUsers, recentMessages) => `üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}
‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${messageCount}
‚Ä¢ –°—Ç–∞—Ç—É—Å API: ${apiStatus.isOnline ? "Online" : "Offline"}
‚Ä¢ –†–µ–∂–∏–º –±–æ—Ç–∞: ${isOfflineMode ? "Offline" : "Online"}

üìÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):
${recentUsers}

üí¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 3):
${recentMessages}`,
    
    // Navigation
    nextPage: "‚è© –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
    prevPage: "‚è™ –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
    
    // General
    pleaseRegister: "–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
    adminOnly: "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
    noUsers: "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    noMessages: "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"
  }
}

// Language options
const LANGUAGE_OPTIONS = {
  reply_markup: {
    inline_keyboard: [
      [
        { text: "üá∫üáø O'zbek", callback_data: "lang_uz" },
        { text: "üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data: "lang_ru" },
      ],
    ],
  },
}

// Helper function to get course options based on language
function getCourseOptions(language = "uz") {
  const t = TRANSLATIONS[language]
  return {
    reply_markup: {
      inline_keyboard: [
        [
          { text: t.course1, callback_data: "course_1" },
          { text: t.course2, callback_data: "course_2" },
        ],
        [
          { text: t.course3, callback_data: "course_3" },
          { text: t.course4, callback_data: "course_4" },
        ],
      ],
    },
  }
}

// Helper function to get direction options based on language and page
function getDirectionOptions(language = "uz", page = 1) {
  const t = TRANSLATIONS[language]
  const directions = t.directions
  
  switch (page) {
    case 1:
      return {
        reply_markup: {
          inline_keyboard: [
            [{ text: directions.dasturiy_injiniring, callback_data: "dir_dasturiy_injiniring" }],
            [{ text: directions.kompyuter_injiniringi, callback_data: "dir_kompyuter_injiniringi" }],
            [{ text: directions.bank_ishi, callback_data: "dir_bank_ishi" }],
            [{ text: directions.moliya_texnologiyalar, callback_data: "dir_moliya_texnologiyalar" }],
            [{ text: directions.logistika, callback_data: "dir_logistika" }],
            [{ text: directions.iqtisodiyot, callback_data: "dir_iqtisodiyot" }],
            [{ text: t.nextPage, callback_data: "dir_page_2" }],
          ],
        },
      }
    case 2:
      return {
        reply_markup: {
          inline_keyboard: [
            [{ text: directions.buxgalteriya_hisobi, callback_data: "dir_buxgalteriya_hisobi" }],
            [{ text: directions.turizm_mehmondostlik, callback_data: "dir_turizm_mehmondostlik" }],
            [{ text: directions.maktabgacha_talim, callback_data: "dir_maktabgacha_talim" }],
            [{ text: directions.boshlangich_talim, callback_data: "dir_boshlangich_talim" }],
            [{ text: directions.maxsus_pedagogika, callback_data: "dir_maxsus_pedagogika" }],
            [{ text: directions.ozbek_tili_adabiyoti, callback_data: "dir_ozbek_tili_adabiyoti" }],
            [
              { text: t.prevPage, callback_data: "dir_page_1" },
              { text: t.nextPage, callback_data: "dir_page_3" },
            ],
          ],
        },
      }
    case 3:
      return {
        reply_markup: {
          inline_keyboard: [
            [{ text: directions.xorijiy_til_adabiyoti, callback_data: "dir_xorijiy_til_adabiyoti" }],
            [{ text: directions.tarix, callback_data: "dir_tarix" }],
            [{ text: directions.matematika, callback_data: "dir_matematika" }],
            [{ text: directions.psixologiya, callback_data: "dir_psixologiya" }],
            [{ text: directions.arxitektura, callback_data: "dir_arxitektura" }],
            [{ text: directions.ijtimoiy_ish, callback_data: "dir_ijtimoiy_ish" }],
            [{ text: t.prevPage, callback_data: "dir_page_2" }],
          ],
        },
      }
    default:
      return getDirectionOptions(language, 1)
  }
}

// Helper function to get category options based on language
function getCategoryOptions(language = "uz") {
  const t = TRANSLATIONS[language]
  const categories = t.categories
  
  return {
    reply_markup: {
      inline_keyboard: [
        [{ text: categories.sharoit, callback_data: "cat_sharoit" }],
        [{ text: categories.qabul, callback_data: "cat_qabul" }],
        [{ text: categories.dars, callback_data: "cat_dars" }],
        [{ text: categories.teacher, callback_data: "cat_teacher" }],
        [{ text: categories.tutor, callback_data: "cat_tutor" }],
        [{ text: categories.dekanat, callback_data: "cat_dekanat" }],
        [{ text: categories.other, callback_data: "cat_other" }],
      ],
    },
  }
}

// Show language selection
function showLanguageSelection(chatId) {
  const message = `üåç Tilni tanlang / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫

üá∫üáø O'zbek
üá∑üá∫ –†—É—Å—Å–∫–∏–π`

  bot.sendMessage(chatId, message, LANGUAGE_OPTIONS)
  userStates.set(chatId, { state: STATES.WAITING_LANGUAGE })
}

function showMainMenu(chatId, fullName, language = "uz") {
  const t = TRANSLATIONS[language] || TRANSLATIONS.uz
  
  const enhancedMainMenu = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: t.suggestion, callback_data: "suggestion" },
          { text: t.complaint, callback_data: "complaint" },
        ],
      ],
    },
  }
  bot.sendMessage(chatId, t.welcome(fullName), enhancedMainMenu)
}

function getCategoryDescription(category, language = "uz") {
  const t = TRANSLATIONS[language] || TRANSLATIONS.uz
  const descriptions = t.categoryDescriptions
  
  // Map category names to translation keys
  const categoryMap = {
    "Sharoit": "sharoit",
    "Qabul": "qabul", 
    "Dars jarayoni": "dars",
    "O'qituvchi": "teacher",
    "Tyutor": "tutor",
    "Dekanat": "dekanat",
    "Boshqa sabab": "other",
    // Russian mappings
    "–£—Å–ª–æ–≤–∏—è": "sharoit",
    "–ü—Ä–∏–µ–º": "qabul",
    "–£—á–µ–±–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å": "dars", 
    "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å": "teacher",
    "–¢—å—é—Ç–æ—Ä": "tutor",
    "–î–µ–∫–∞–Ω–∞—Ç": "dekanat",
    "–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞": "other"
  }
  
  const key = categoryMap[category]
  return key ? descriptions[key] : ""
}

// Function to get category-specific message prompts
function getCategorySpecificMessage(categoryData, language = "uz") {
  const messages = {
    uz: {
      cat_sharoit: "üè¢ Shikoyatingiz bino, xonalar, jihozlar va infratuzilma bilan bog'liq bo'lsa, u haqda batafsil yozing (kamida 10 ta belgi):",
      
      cat_qabul: "üìù Shikoyatingiz qabul jarayoni, hujjatlar va ro'yxatga olish bilan bog'liq bo'lsa, u haqda batafsil yozing (kamida 10 ta belgi):",
      
      cat_dars: "üìö Shikoyatingiz ta'lim sifati, dars jadvali va o'quv jarayoni bilan bog'liq bo'lsa, u haqda batafsil yozing. Bunda o'qituvchi ismi familiyasi, xona raqami, dars vaqti haqida tafsilotlarni yozishni unutmang (kamida 10 ta belgi):",
      
      cat_teacher: "üë®‚Äçüè´ Shikoyatingiz professor-o'qituvchilar bilan bog'liq bo'lsa, u haqda batafsil yozing. Bunda o'qituvchi ismi familiyasini ham yozishni unutmang (kamida 10 ta belgi):",
      
      cat_tutor: "üéì Shikoyatingiz tyutorlar va ularning faoliyati bilan bog'liq bo'lsa, u haqda batafsil yozing. Bunda iloji bo'sa tyutorning ism familiyasini yozishni unutmang (kamida 10 ta belgi):",
      
      cat_dekanat: "üèõÔ∏è Shikoyatingiz ma'muriy masalalar, kafedra yoki dekanat xizmatlari bilan bog'liq bo'lsa, u haqda batafsil yozing (kamida 10 ta belgi):",
      
      cat_other: "‚ùì Shikoyatingiz haqida batafsil yozing. Masalani o'rganib chiqish uchun kerakli bo'lishi mumkin bo'lgan barcha tafsilotlarni ham yozishni unutmang (kamida 10 ta belgi):"
    },
    
    ru: {
      cat_sharoit: "üè¢ –ï—Å–ª–∏ –≤–∞—à–∞ –∂–∞–ª–æ–±–∞ —Å–≤—è–∑–∞–Ω–∞ —Å–æ –∑–¥–∞–Ω–∏—è–º–∏, –ø–æ–º–µ—â–µ–Ω–∏—è–º–∏, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –µ—ë (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤):",
      
      cat_qabul: "üìù –ï—Å–ª–∏ –≤–∞—à–∞ –∂–∞–ª–æ–±–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø—Ä–æ—Ü–µ—Å—Å–æ–º –ø—Ä–∏–µ–º–∞, –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –µ—ë (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤):",
      
      cat_dars: "üìö –ï—Å–ª–∏ –≤–∞—à–∞ –∂–∞–ª–æ–±–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∏ —É—á–µ–±–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –µ—ë. –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤):",
      
      cat_teacher: "üë®‚Äçüè´ –ï—Å–ª–∏ –≤–∞—à–∞ –∂–∞–ª–æ–±–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä—Å–∫–æ-–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ—Å—Ç–∞–≤–æ–º, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –µ—ë. –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤):",
      
      cat_tutor: "üéì –ï—Å–ª–∏ –≤–∞—à–∞ –∂–∞–ª–æ–±–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Ç—å—é—Ç–æ—Ä–∞–º–∏ –∏ –∏—Ö –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –µ—ë. –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —Ç—å—é—Ç–æ—Ä–∞ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤):",
      
      cat_dekanat: "üèõÔ∏è –ï—Å–ª–∏ –≤–∞—à–∞ –∂–∞–ª–æ–±–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏, –∫–∞—Ñ–µ–¥—Ä–æ–π –∏–ª–∏ —É—Å–ª—É–≥–∞–º–∏ –¥–µ–∫–∞–Ω–∞—Ç–∞, –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –µ—ë (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤):",
      
      cat_other: "‚ùì –ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∂–∞–ª–æ–±—É. –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–µ—Ç–∞–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤):"
    }
  }
  
  const langMessages = messages[language] || messages.uz
  return langMessages[categoryData] || langMessages.cat_other
}

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id

  try {
    let existingUser = null

    // Try API first
    try {
      existingUser = await ErrorHandler.retryOperation(() => apiClient.checkUserExists(chatId), 2, 1000)
    } catch (apiError) {
      // User doesn't exist, start with language selection
      showLanguageSelection(chatId)
      return
    }

    if (existingUser) {
      // Update user activity
      apiClient.updateUserActivity(chatId)

      // User exists, show main menu with their language
      const userLanguage = existingUser.language || "uz"
      showMainMenu(chatId, existingUser.fullName, userLanguage)
      userStates.set(chatId, { state: STATES.IDLE, fullName: existingUser.fullName, language: userLanguage })
    } else {
      // User doesn't exist, start with language selection
      showLanguageSelection(chatId)
    }
  } catch (error) {
    const t = TRANSLATIONS.uz // Default to Uzbek for error messages
    bot.sendMessage(chatId, t.registrationError)
    userStates.set(chatId, { state: STATES.WAITING_NAME })
  }
})

// Help command handler
bot.onText(/\/help/, async (msg) => {
  const chatId = msg.chat.id
  
  // Try to get user's language preference
  let userLanguage = "uz"
  try {
    const existingUser = await apiClient.checkUserExists(chatId).catch(() => null)
    if (existingUser && existingUser.language) {
      userLanguage = existingUser.language
    }
  } catch (error) {
    // Default to Uzbek if can't determine language
  }
  
  const t = TRANSLATIONS[userLanguage] || TRANSLATIONS.uz
  bot.sendMessage(chatId, t.helpText)
})

bot.onText(/\/menu/, async (msg) => {
  const chatId = msg.chat.id

  try {
    const existingUser = await apiClient.checkUserExists(chatId).catch(() => null)

    if (existingUser) {
      const userLanguage = existingUser.language || "uz"
      showMainMenu(chatId, existingUser.fullName, userLanguage)
      userStates.set(chatId, { state: STATES.IDLE, fullName: existingUser.fullName, language: userLanguage })
    } else {
      const t = TRANSLATIONS.uz // Default to Uzbek for new users
      bot.sendMessage(chatId, t.pleaseRegister)
    }
  } catch (error) {
    const t = TRANSLATIONS.uz // Default to Uzbek for error messages
    bot.sendMessage(chatId, t.menuError)
  }
})



// Handle text messages for registration flow
bot.on("message", async (msg) => {
  const chatId = msg.chat.id
  const text = msg.text

  // Skip if it's a command
  if (text && text.startsWith("/")) {
    return
  }

  const userState = userStates.get(chatId)
  if (!userState) {
    return
  }



  try {
    switch (userState.state) {
      case STATES.WAITING_NAME:
        const nameLanguage = userState.language || "uz"
        const nameT = TRANSLATIONS[nameLanguage] || TRANSLATIONS.uz
        
        if (!text || text.trim().length < 2) {
          bot.sendMessage(chatId, nameT.enterFullName)
          return
        }

        if (!Validator.validateFullName(text)) {
          bot.sendMessage(chatId, nameT.invalidName)
          return
        }

        userState.fullName = text.trim()
        userState.state = STATES.WAITING_PHONE

        bot.sendMessage(chatId, nameT.enterPhone)
        userStates.set(chatId, userState)
        break

      case STATES.WAITING_PHONE:
        const phoneLanguage = userState.language || "uz"
        const phoneT = TRANSLATIONS[phoneLanguage] || TRANSLATIONS.uz
        
        if (!Validator.validatePhoneNumber(text)) {
          bot.sendMessage(chatId, phoneT.invalidPhone)
          return
        }

        userState.phone = text.trim()
        userState.state = STATES.WAITING_COURSE

        bot.sendMessage(chatId, phoneT.selectCourse, getCourseOptions(phoneLanguage))
        userStates.set(chatId, userState)
        break

      case STATES.WAITING_MESSAGE_TEXT:
        const messageLanguage = userState.language || "uz"
        const messageT = TRANSLATIONS[messageLanguage] || TRANSLATIONS.uz

        if (!text || text.trim().length < 10) {
          bot.sendMessage(chatId, messageT.messageTooShort)
          return
        }

        if (text.length > 1000) {
          bot.sendMessage(chatId, messageT.messageTooLong)
          return
        }

        await handleMessageSubmission(chatId, userState, text.trim())
        break

      default:
        const existingUser = await apiClient.checkUserExists(chatId).catch(() => null)
        if (existingUser) {
          const userLanguage = existingUser.language || "uz"
          showMainMenu(chatId, existingUser.fullName, userLanguage)
        } else {
          const t = TRANSLATIONS.uz // Default to Uzbek for new users
          bot.sendMessage(chatId, t.pleaseRegister)
        }
        break
    }
  } catch (error) {
    const t = TRANSLATIONS.uz // Default to Uzbek for error messages
    bot.sendMessage(chatId, t.menuError)
    userStates.delete(chatId)
  }
})


bot.on("callback_query", async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id
  const data = callbackQuery.data
  const messageId = callbackQuery.message.message_id



  bot.answerCallbackQuery(callbackQuery.id)

  const userState = userStates.get(chatId) || { state: STATES.IDLE }

  try {
    if (data.startsWith("lang_")) {
      const language = data.replace("lang_", "")
      userState.language = language
      userState.state = STATES.WAITING_NAME

      const t = TRANSLATIONS[language] || TRANSLATIONS.uz
      const welcomeMessage = t.welcomeRegistration

      bot.editMessageText(welcomeMessage, {
        chat_id: chatId,
        message_id: messageId,
      })

      userStates.set(chatId, userState)
      return
    }

    if (data.startsWith("course_")) {
      const courseNumber = data.replace("course_", "")
      const language = userState.language || "uz"
      const t = TRANSLATIONS[language] || TRANSLATIONS.uz
      
      const course = courseNumber === "1" ? t.course1 : 
                    courseNumber === "2" ? t.course2 :
                    courseNumber === "3" ? t.course3 : t.course4
      
      userState.course = course
      userState.state = STATES.WAITING_DIRECTION

      bot.editMessageText(`${t.courseSelected(course)}\n\n${t.selectDirection}`, {
        chat_id: chatId,
        message_id: messageId,
        ...getDirectionOptions(language, 1),
      })

      userStates.set(chatId, userState)
      return
    }

    if (data.startsWith("dir_page_")) {
      const pageNumber = parseInt(data.replace("dir_page_", ""))
      const language = userState.language || "uz"
      const t = TRANSLATIONS[language] || TRANSLATIONS.uz
      const pageText = t.selectDirection

      bot.editMessageText(pageText, {
        chat_id: chatId,
        message_id: messageId,
        ...getDirectionOptions(language, pageNumber),
      })
      return
    }

    if (data.startsWith("dir_") && !data.startsWith("dir_page_")) {
      const language = userState.language || "uz"
      const t = TRANSLATIONS[language] || TRANSLATIONS.uz
      const directions = t.directions
      
      const directionMap = {
        dir_dasturiy_injiniring: directions.dasturiy_injiniring,
        dir_kompyuter_injiniringi: directions.kompyuter_injiniringi,
        dir_bank_ishi: directions.bank_ishi,
        dir_moliya_texnologiyalar: directions.moliya_texnologiyalar,
        dir_logistika: directions.logistika,
        dir_iqtisodiyot: directions.iqtisodiyot,
        dir_buxgalteriya_hisobi: directions.buxgalteriya_hisobi,
        dir_turizm_mehmondostlik: directions.turizm_mehmondostlik,
        dir_maktabgacha_talim: directions.maktabgacha_talim,
        dir_boshlangich_talim: directions.boshlangich_talim,
        dir_maxsus_pedagogika: directions.maxsus_pedagogika,
        dir_ozbek_tili_adabiyoti: directions.ozbek_tili_adabiyoti,
        dir_xorijiy_til_adabiyoti: directions.xorijiy_til_adabiyoti,
        dir_tarix: directions.tarix,
        dir_matematika: directions.matematika,
        dir_psixologiya: directions.psixologiya,
        dir_arxitektura: directions.arxitektura,
        dir_ijtimoiy_ish: directions.ijtimoiy_ish,
      }

      const direction = directionMap[data]
      if (direction) {
        userState.direction = direction

        bot.editMessageText(`${t.directionSelected(direction)}\n\n${t.registrationCompleting}`, {
          chat_id: chatId,
          message_id: messageId,
        })

        userStates.set(chatId, userState)

        setTimeout(async () => {
          await completeRegistration(chatId, userState)
          // Delete the "yakunlanmoqda" message
          bot.deleteMessage(chatId, messageId).catch(() => {})
        }, 2000)
        return
      }
    }

    // Handle main menu actions
    if (data === "suggestion") {
      userState.ticketType = data // suggestion
      userState.state = STATES.WAITING_MESSAGE_TEXT
      userState.category = null // No category for suggestions
      userState.substatus = null // No substatus for suggestions

      const language = userState.language || "uz"
      const t = TRANSLATIONS[language] || TRANSLATIONS.uz
      const translatedType = t.messageTypes[userState.ticketType] || userState.ticketType
      const messageText = t.enterMessage(translatedType)

      bot.editMessageText(messageText, {
        chat_id: chatId,
        message_id: messageId,
      })

      userStates.set(chatId, userState)
      return
    }

    if (data === "complaint") {
      userState.ticketType = data // complaint
      userState.state = STATES.WAITING_MESSAGE_TEXT

      const language = userState.language || "uz"
      const t = TRANSLATIONS[language] || TRANSLATIONS.uz
      const translatedType = t.messageTypes[userState.ticketType] || userState.ticketType
      const categoryText = t.selectCategory(translatedType)

      bot.editMessageText(categoryText, {
        chat_id: chatId,
        message_id: messageId,
        ...getCategoryOptions(language),
      })

      userStates.set(chatId, userState)
      return
    }

    // Handle category selection
    if (data.startsWith("cat_")) {
      const language = userState.language || "uz"
      const t = TRANSLATIONS[language] || TRANSLATIONS.uz
      const categories = t.categories
      
      const categoryMap = {
        cat_sharoit: { uz: "Sharoit", ru: "–£—Å–ª–æ–≤–∏—è", en: "Conditions" },
        cat_qabul: { uz: "Qabul", ru: "–ü—Ä–∏–µ–º", en: "Admission" },
        cat_dars: { uz: "Dars jarayoni", ru: "–£—á–µ–±–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å", en: "Learning Process" },
        cat_teacher: { uz: "O'qituvchi", ru: "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", en: "Teacher" },
        cat_tutor: { uz: "Tyutor", ru: "–¢—å—é—Ç–æ—Ä", en: "Tutor" },
        cat_dekanat: { uz: "Dekanat", ru: "–î–µ–∫–∞–Ω–∞—Ç", en: "Dean Office" },
        cat_other: { uz: "Boshqa sabab", ru: "–î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞", en: "Other" },
      }

      const categoryData = categoryMap[data]
      const category = language === "ru" ? categoryData.ru : categoryData.uz
      const substatus = categoryData.en

      userState.category = category
      userState.substatus = substatus

      // Get category-specific message based on selected category
      const categorySpecificMessage = getCategorySpecificMessage(data, language)

      bot.editMessageText(
        categorySpecificMessage,
        {
          chat_id: chatId,
          message_id: messageId,
        },
      )

      userStates.set(chatId, userState)
      return
    }

    // Handle help info
    if (data === "help_info") {
      const language = userState.language || "uz"
      const t = TRANSLATIONS[language] || TRANSLATIONS.uz
      const helpText = `${t.help}

${t.helpText}

üîÑ ${t.useMenu}`

      bot.editMessageText(helpText, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: [[{ text: t.back, callback_data: "back_to_menu" }]],
        },
      })
      return
    }

    // Handle back to menu
    if (data === "back_to_menu") {
      const existingUser = await apiClient.checkUserExists(chatId).catch(() => null)
      if (existingUser) {
        const userLanguage = existingUser.language || "uz"
        const t = TRANSLATIONS[userLanguage] || TRANSLATIONS.uz
        const welcomeText = t.welcome(existingUser.fullName)

        bot.editMessageText(welcomeText, {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: {
            inline_keyboard: [
              [
                { text: t.suggestion, callback_data: "suggestion" },
                { text: t.complaint, callback_data: "complaint" },
              ],
            ],
          },
        })

        userStates.set(chatId, { state: STATES.IDLE, fullName: existingUser.fullName, language: userLanguage })
      }
      return
    }
  } catch (error) {
    const t = TRANSLATIONS.uz // Default to Uzbek for error messages
    bot.sendMessage(chatId, t.callbackError)
  }
})

async function handleMessageSubmission(chatId, userState, messageText) {
  try {
    const ticketNumber = `USAT-${Date.now().toString().slice(-6)}`

    const priority = determinePriority(userState.category, messageText)
    const messageId = Date.now() 

    const messageData = {
      messageId: messageId,
      userId: chatId, 
      chatId: chatId,
      timestamp: new Date().toISOString(),
      status: "pending",
      ticketType: userState.ticketType, 
      text: messageText,
      language: userState.language || "uz",
      isactive: false,
      substatus: userState.ticketType === "suggestion" ? null : userState.substatus,
    }

    console.log("=== TAKLIF/SHIKOYAT API'GA JO'NATILAYOTGAN DATA ===")
    console.log("Ticket Type:", userState.ticketType)
    console.log("Full Data:", JSON.stringify(messageData, null, 2))
    console.log("================================================")

    let result = null

    try {
      result = await ErrorHandler.retryOperation(() => apiClient.saveMessage(messageData), 2, 2000)
      console.log("‚úÖ API'ga muvaffaqiyatli jo'natildi!")
    } catch (apiError) {
      console.log("‚ùå API'ga jo'natishda xatolik:", apiError.message)
      logger.error("API message submission failed", { error: apiError.message })
    }

    if (result) {
      const language = userState.language || "uz"
      const t = TRANSLATIONS[language] || TRANSLATIONS.uz
      const translatedType = t.messageTypes[userState.ticketType] || userState.ticketType

      const statusMessage = t.messageSubmitted(translatedType)
      bot.sendMessage(chatId, statusMessage)

      setTimeout(() => {
        showMainMenu(chatId, userState.fullName, userState.language)
        userStates.set(chatId, { state: STATES.IDLE, fullName: userState.fullName, language: userState.language })
      }, 2000)
    } else {
      const language = userState.language || "uz"
      const t = TRANSLATIONS[language] || TRANSLATIONS.uz
      bot.sendMessage(chatId, t.messageError)
    }
  } catch (error) {
    logger.error("Message submission error", { error: error.message, chatId })
    const t = TRANSLATIONS.uz 
    bot.sendMessage(chatId, t.messageError)
  }
}

function determinePriority(category, messageText) {
  const highPriorityKeywords = ["shoshilinch", "muhim", "zudlik", "tezkor"]
  const highPriorityCategories = ["Dekanat", "O'qituvchi"]

  const text = messageText.toLowerCase()
  const hasHighPriorityKeyword = highPriorityKeywords.some((keyword) => text.includes(keyword))
  const isHighPriorityCategory = highPriorityCategories.includes(category)

  if (hasHighPriorityKeyword || isHighPriorityCategory) {
    return "Yuqori"
  } else if (text.length > 200) {
    return "O'rta"
  } else {
    return "Past"
  }
}

async function completeRegistration(chatId, userState) {
  const userData = {
    userId: chatId, 
    chatId: chatId,
    fullName: userState.fullName,
    phone: userState.phone,
    course: userState.course,
    direction: userState.direction,
    language: userState.language || "uz",
    lastActivity: new Date().toISOString(),
  }

  console.log("[v0] User registration data being sent to API:", JSON.stringify(userData, null, 2))

  try {
    let result = null

    try {
      console.log("[v0] Attempting API registration call...")
      result = await ErrorHandler.retryOperation(() => apiClient.registerUser(userData), 2, 2000)
      console.log("[v0] API registration successful:", result)
    } catch (apiError) {
      console.log("[v0] API registration failed:", apiError.message)
      throw apiError
    }

    if (result) {
      const language = userState.language || "uz"
      const t = TRANSLATIONS[language] || TRANSLATIONS.uz
      const successMessage = t.registrationComplete

      bot.sendMessage(chatId, successMessage)
      showMainMenu(chatId, userState.fullName, language)
      userStates.set(chatId, { state: STATES.IDLE, fullName: userState.fullName, language: language })
    }
  } catch (error) {
    const errorInfo = ErrorHandler.handleAPIError(error, "User registration")
    const t = TRANSLATIONS.uz 
    bot.sendMessage(chatId, `${t.errorOccurred} ${errorInfo.userMessage}`)

    if (errorInfo.errorType !== "DUPLICATE") {
      bot.sendMessage(chatId, t.pleaseRegister)
      userStates.delete(chatId)
    }
  }
}

bot.on("polling_error", (error) => {
  console.error("Polling error:", error.message)
})

process.on("SIGINT", () => {
  console.log("Received SIGINT, shutting down gracefully...")
  process.exit(0)
})

process.on("SIGTERM", () => {
  console.log("Received SIGTERM, shutting down gracefully...")
  process.exit(0)
})

async function initializeBot() {
  console.log("Initializing bot...")
  console.log(`API Base URL: ${API_BASE_URL}`)
  console.log(`Bot Token: ${token ? "Set" : "Missing"}`)

  const isHealthy = await apiClient.healthCheck()
  if (!isHealthy) {
    console.warn("‚ö†Ô∏è API health check failed - bot will run in API-only mode")
    console.warn("Please check if the API server is running and accessible")
  } else {
    console.log("‚úÖ API health check passed - online mode")
  }

  console.log("ü§ñ Bot started successfully!")
}

initializeBot()